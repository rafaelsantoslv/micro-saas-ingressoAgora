datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String           @unique
  password      String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  role          Role             @default(COMPRADOR)
  eventos       Evento[]         @relation("ProdutorEventos")
  ingressos     Ingresso[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Evento {
  id                  Int          @id @default(autoincrement())
  name                String
  description         String?
  date                DateTime
  location            String
  producerId          String
  producer            User         @relation("ProdutorEventos", fields: [producerId], references: [id])
  batches             Lote[]
  tickets             Ingresso[]
  totalTicketQuantity Int
  soldTicketQuantity  Int          @default(0)
  basePrice           Float
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Lote {
  id        Int      @id @default(autoincrement())
  name      String
  eventId   Int
  event     Evento   @relation(fields: [eventId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}

model Ingresso {
  id          Int      @id @default(autoincrement())
  eventId     Int
  event       Evento   @relation(fields: [eventId], references: [id])
  buyerId     String
  buyer       User     @relation(fields: [buyerId], references: [id])
  quantity    Int
  totalPrice  Float
  createdAt   DateTime @default(now())
}

enum Role {
  PRODUTOR
  COMPRADOR
}

enum StatusTransacao {
  PENDING
  COMPLETED
  FAILED
}
